{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><comment id=\":YErA!qkhuw6g(g71m,R\" x=\"647\" y=\"-11\" h=\"218\" w=\"286\">Project:  \n              \nAuthor:  \n\nCreated:\n\nConfiguration:\nNone</comment><block type=\"v5_events_when_driver\" id=\"2sxv[tBvb/TOc3zh^a$R\" x=\"390\" y=\"10\"><next><block type=\"v5_control_forever\" id=\"F.tPZ%Bi}Wa/I(0.4jnV\"></block></next></block><block type=\"v5_events_when_controller_button\" id=\"vWbQX=MclUfLDV4$Pl)@\" x=\"950\" y=\"50\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonY</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_drivetrain_set_drive_stopping\" id=\"BC-46PZ-TC.5k$-F`cj6\"><field name=\"MODE\">hold</field></block></next></block><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"10\" y=\"230\"><next><block type=\"v5_motion_set_motor_stopping\" id=\"Nq?R6qiU:C}Zl@20AnN|\"><field name=\"MOTOR\">FourBar</field><field name=\"MODE\">hold</field><next><block type=\"v5_motion_set_motor_stopping\" id=\"]*+J|)$Rx|Ym#u3YMTrl\"><field name=\"MOTOR\">Clamp</field><field name=\"MODE\">hold</field><next><block type=\"v5_motion_set_motor_stopping\" id=\"wu$$UdW`Rr/1A$(Z#HcH\"><field name=\"MOTOR\">TiltClamp</field><field name=\"MODE\">hold</field><next><block type=\"v5_motion_set_motor_velocity\" id=\"rE4l*HL{X5XY9y`in62T\"><field name=\"MOTOR\">FourBar</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"1E`!aH[iVQCFnP+OeR^D\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"TC$onW?%[W=LriL+S2K2\"><field name=\"MOTOR\">Clamp</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"q^Xoi$qM3n7#YXX*QN+?\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"v=bX)kTi+?wJsnTV[rH}\"><field name=\"MOTOR\">TiltClamp</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"lWqlS5eal6=8+}dxy6-Q\"><field name=\"NUM\">80</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_controller_button\" id=\"Af#n@MVc/$e!wv]yj`S@\" x=\"970\" y=\"250\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonRight</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_drivetrain_set_drive_stopping\" id=\"3ob5G_e22tRRTi`R+73e\"><field name=\"MODE\">coast</field></block></next></block><block type=\"v5_events_when_autonomous\" id=\"y)n):)-6lhx,qkLtf#Zn\" x=\"550\" y=\"310\"><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"HDFM*_M?wdK!.u6LEYSw\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"O+sI(#;Va8}W(1*~#NV?\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"`m94Hpd/3J1%9yso`otK\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\";9Td.)^bYZ+Olw@m=s4~\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"}ThZ~riM-FU/R4UvwUQR\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"HS391oDv=dmssTGX2Uz+\"><field name=\"NUM\">30</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"8[e=EbEo#~gOG`809KxR\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"pBmw[ugnP#?_q(Ky%?hA\"><field name=\"NUM\">6</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"]@AV?VlpFkZsD|{7v;4q\"><field name=\"MOTOR\">Clamp</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"G;^Jx+BFBbgXmq8l:?J4\"><field name=\"NUM\">500</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"dw}7E|XLW_TL$Amk1Sby\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"dvUeVOy--q/G[,S23eTi\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_set_turn_velocity\" id=\"N^s=9kNZ[hstB:,MhidV\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"O3P,7^{tY`(6vI-?]iXj\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"f$2n+M+YNE:dF!xZ:nTC\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"y@CeK=VfAbuP9V_Z/c)L\"><field name=\"NUM\">20</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"2lERVE1O@[6xn).AB%7=\"><field name=\"MOTOR\">TiltClamp</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">TRUE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\";SfhCE-n{qJQecr.NZBj\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"1ph.wDF7x+p0$Ps7oT7%\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"ejDU$Wgkb/ld7xiwp-8t\"><field name=\"NUM\">123</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"F9+_oE!]RK:i:/~-.)W.\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"u!4Hu%ROL:.m@nj/R-8T\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"t*RGE.`/~m!u!MpRE?gF\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"=i[qm(I33/b-05r`)1W=\"><field name=\"NUM\">22</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"OuJc$GuP(H@|t^)6u%qw\"><field name=\"MOTOR\">TiltClamp</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"WZm)~id}XGu$pD|7^Uvp\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"%}bB[R2VRdCL;w6VtP@n\"><field name=\"MOTOR\">FourBar</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"EBIbhf,J$I:a}Zao~k:M\"><field name=\"NUM\">30</field></shadow></value><next><block type=\"v5_motion_set_motor_timeout\" id=\"INRq3|pOgE{Wn^Y]gILz\"><field name=\"MOTOR\">TiltClamp</field><value name=\"TIMEOUT\"><shadow type=\"math_number\" id=\"lBsj97%$/{yHI4~^V6ZU\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"v5_motion_set_motor_timeout\" id=\"j0JJO*,bHAC*:#tDnJN}\"><field name=\"MOTOR\">FourBar</field><value name=\"TIMEOUT\"><shadow type=\"math_number\" id=\"VuP(~87XIfpqNJA7;:,f\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"~6#LCmsaZdxP`rv7ik6(\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Q{^=a14;(}(g4[GBXpd6\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"hPYN]e=A67u0L9H0M2:@\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"(})J!|vwRTyrcFLpOJAq\"><field name=\"NUM\">35</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[4,6,7,5,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"7:5","direction":"rev","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[2,9],"name":"FourBar","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"Up","rev":"Down","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[3],"name":"Clamp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"Up","rev":"Down","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"TiltClamp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"Up","rev":"Down","gear":"ratio36_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"FourBar","leftDir":"false","right":"Clamp","rightDir":"false","upDown":"TiltClamp","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT4, ratio18_1, true);\nmotor leftMotorB = motor(PORT6, ratio18_1, true);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT7, ratio18_1, false);\nmotor rightMotorB = motor(PORT5, ratio18_1, false);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1.4);\n\nmotor FourBarMotorA = motor(PORT2, ratio36_1, true);\nmotor FourBarMotorB = motor(PORT9, ratio36_1, false);\nmotor_group FourBar = motor_group(FourBarMotorA, FourBarMotorB);\n\nmotor Clamp = motor(PORT3, ratio18_1, false);\n\nmotor TiltClamp = motor(PORT8, ratio36_1, true);\n\ncontroller Controller1 = controller(primary);\n\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool Controller1UpDownButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control FourBar\n      if (Controller1.ButtonL1.pressing()) {\n        FourBar.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        FourBar.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        FourBar.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control Clamp\n      if (Controller1.ButtonR1.pressing()) {\n        Clamp.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Clamp.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Clamp.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonUp/ButtonDown status to control TiltClamp\n      if (Controller1.ButtonUp.pressing()) {\n        TiltClamp.spin(forward);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonDown.pressing()) {\n        TiltClamp.spin(reverse);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (!Controller1UpDownButtonsControlMotorsStopped) {\n        TiltClamp.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1UpDownButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat myVariable;\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  while (true) {\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when Controller1 ButtonY pressed\" hat block\nvoid onevent_Controller1ButtonY_pressed_0() {\n  Drivetrain.setStopping(hold);\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  FourBar.setStopping(hold);\n  Clamp.setStopping(hold);\n  TiltClamp.setStopping(hold);\n  FourBar.setVelocity(80.0, percent);\n  Clamp.setVelocity(100.0, percent);\n  TiltClamp.setVelocity(80.0, percent);\n  return 0;\n}\n\n// \"when Controller1 ButtonRight pressed\" hat block\nvoid onevent_Controller1ButtonRight_pressed_0() {\n  Drivetrain.setStopping(coast);\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.driveFor(forward, 50.0, inches, true);\n  Drivetrain.setDriveVelocity(30.0, percent);\n  Drivetrain.driveFor(forward, 6.0, inches, true);\n  Clamp.spinFor(reverse, 500.0, degrees, true);\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.setTurnVelocity(100.0, percent);\n  Drivetrain.driveFor(reverse, 20.0, inches, true);\n  TiltClamp.spinFor(forward, 100.0, degrees, false);\n  Drivetrain.turnFor(left, 123.0, degrees, true);\n  Drivetrain.setDriveVelocity(50.0, percent);\n  Drivetrain.driveFor(reverse, 22.0, inches, true);\n  TiltClamp.spinFor(reverse, 90.0, degrees, true);\n  FourBar.spinFor(forward, 30.0, degrees, true);\n  TiltClamp.setTimeout(3.0, sec);\n  FourBar.setTimeout(3.0, sec);\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.driveFor(forward, 35.0, inches, true);\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n\n\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // register event handlers\n  Controller1.ButtonY.pressed(onevent_Controller1ButtonY_pressed_0);\n  Controller1.ButtonRight.pressed(onevent_Controller1ButtonRight_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}