{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><comment id=\":YErA!qkhuw6g(g71m,R\" x=\"756\" y=\"-641\" h=\"233\" w=\"322\">Project:  Four Bar Skills Code\n              \nAuthor:  Aarush Pallath, Modded by Albert Mathisz\n\nCreated:  1/27/22\n\nConfiguration:\nForwards Facing the blue mobile goal</comment><block type=\"v5_events_when_autonomous\" id=\"y)n):)-6lhx,qkLtf#Zn\" x=\"90\" y=\"-570\"><next><block type=\"procedures_call\" id=\"d9a(8TkqivqbuNsRO4o$\"><mutation proccode=\"Run Skills\" proceduredefid=\"}_IBu8{vXe6ffPfy^yk3\" argumentids=\"[]\" warp=\"false\"></mutation></block></next></block><block type=\"v5_events_when_driver\" id=\"2sxv[tBvb/TOc3zh^a$R\" x=\"490\" y=\"-590\"><next><block type=\"v5_control_forever\" id=\"F.tPZ%Bi}Wa/I(0.4jnV\"></block></next></block><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"310\" y=\"-570\"><next><block type=\"procedures_call\" id=\"Zy1r,X[DWYz4T-y9U-L?\"><mutation proccode=\"Set Config\" proceduredefid=\"VJ*Mu/Q]_e+I[-44Cw#-\" argumentids=\"[]\" warp=\"false\"></mutation></block></next></block><block type=\"procedures_definition\" id=\"1Mm9%n:^)fde.;xSKmCC\" x=\"50\" y=\"-410\"><statement name=\"custom_block\"><shadow type=\"procedures_prototype\" id=\"VJ*Mu/Q]_e+I[-44Cw#-\"><mutation proccode=\"Set Config\" proceduredefid=\"VJ*Mu/Q]_e+I[-44Cw#-\" argumentids=\"[]\" argumentnames=\"[]\" argumentdefaults=\"[]\" argumenttypes=\"[]\" warp=\"false\"></mutation></shadow></statement><next><block type=\"v5_other_comment\" id=\"DU[{1|-uH!7.(Ww0KZlT\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"pNv{9OTfO^6._`0tUO6!\"><field name=\"comment\">These blocks of code set the motors with different velocity and different stoppings</field></shadow></value><next><block type=\"v5_motion_set_motor_stopping\" id=\"#e./r@)z)$bWv{(zO+gZ\"><field name=\"MOTOR\">Lift</field><field name=\"MODE\">hold</field><next><block type=\"v5_motion_set_motor_stopping\" id=\".D:+_UFK|y;Ga3!y:iR]\"><field name=\"MOTOR\">Clamp</field><field name=\"MODE\">hold</field><next><block type=\"v5_motion_set_motor_stopping\" id=\"*90Q+q/]/M.Pwh:8(-JP\"><field name=\"MOTOR\">Hook</field><field name=\"MODE\">hold</field><next><block type=\"v5_motion_set_motor_velocity\" id=\"`)W9^slua*rDvEheqB]K\"><field name=\"MOTOR\">Clamp</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"_^#h:;)[-(B.w-UIhX6l\"><field name=\"NUM\">65</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"R^54,A!512+nff)3@1M@\"><field name=\"MOTOR\">Hook</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"#Uo-)!H6,*rV?d6c6{Q8\"><field name=\"NUM\">75</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_stopping\" id=\"7vS4~Zs8ymgx(7Uw`rOy\"><field name=\"MODE\">coast</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"procedures_definition\" id=\"A9Vn9@kHTJK@msE~~12Z\" x=\"730\" y=\"-330\"><statement name=\"custom_block\"><shadow type=\"procedures_prototype\" id=\"}_IBu8{vXe6ffPfy^yk3\"><mutation proccode=\"Run Skills\" proceduredefid=\"}_IBu8{vXe6ffPfy^yk3\" argumentids=\"[]\" argumentnames=\"[]\" argumentdefaults=\"[]\" argumenttypes=\"[]\" warp=\"false\"></mutation></shadow></statement><next><block type=\"v5_other_comment\" id=\"[$XY3RvN-JHR1)t:B+|s\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"+IA2-:rEA525b5L@,KSe\"><field name=\"comment\">Pushes Red Mobile Goal to the other side.</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"lQWtW%Ef;=6u8QX5UY*F\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"5DR|*7}EZAz$PLT;KFNx\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"J9BvYi}}=C`[DltH+5Rg\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"31XsuhPN)!M(b0;k4F~g\"><field name=\"NUM\">72</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"Y3x#@WXU)5M})F+,8n?`\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"H+68w($y%r8~fg]]f5?E\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"];oz3#H)i$Taq@N}xq`M\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"mP@_8#WILZJWw;+BQ,bL\"><field name=\"NUM\">12</field></shadow></value><next><block type=\"v5_other_comment\" id=\"u{0P;_5irf9wRxD=vLcg\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"v(l1YA3@FB6xo3YYu?X=\"><field name=\"comment\">Grabs A netural Goal and pushes it to the balance.</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"I`qw^DGXyQzLr|hdpDlQ\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"1N5u+pw[a8IZ_PV=L{DH\"><field name=\"NUM\">55</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"h^+G,KFr8fFev]EJ9|Wf\"><field name=\"MOTOR\">Clamp</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"(fomKD2Z/9|:^JehQg,=\"><field name=\"NUM\">400</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"UguAe7$DfVNs~g0K6j5:\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"g!ytGFn?9}A#i^_lzcmF\"><field name=\"NUM\">12</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"YPc`aarBZZ3nzz8ZMyzK\"><field name=\"MOTOR\">Clamp</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"8h1fqV2)4J%0J##`q+!N\"><field name=\"NUM\">200</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"ty|n}l!k-.w=.O7q#*9)\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"*0vb3A`=In:6M2xgn6/q\"><field name=\"NUM\">13</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"6Jf36?eayyN*~O}%o3YN\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"sPJ]Om65f,/IL-c$-4%6\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"+u6N[77a/4]fj(R9MEvg\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"YVlnN]CItr]_ewz/~jbf\"><field name=\"NUM\">104</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"G,3Cs*Vo|{mX0#9B:s7(\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"ok(kYkH,0mT4k^VDfA2D\"><field name=\"NUM\">110</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_other_comment\" id=\"G1!aD8?l3tzPd]HG#msl\" x=\"290\" y=\"350\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"AKE`z!vGL`)[Br+@hWR0\"><field name=\"comment\">Robot drives up the balance.</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"FJ)5=TQBlk/rj4Zp4KV_\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"qf:dLCotz@NcT-}h=sxB\"><field name=\"NUM\">48</field></shadow></value></block></next></block></xml>","rconfig":[{"port":[2,12,8,20,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"16","unit":"in","wheelbase":"12","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[1,9],"name":"Lift","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"Up","rev":"Down","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[3],"name":"Hook","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"Up","rev":"Down","gear":"ratio36_1"},"triportSourcePort":22},{"port":[4],"name":"Clamp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"Up","rev":"Down","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Lift","leftDir":"false","right":"Clamp","rightDir":"false","upDown":"Hook","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT2, ratio18_1, false);\nmotor leftMotorB = motor(PORT12, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT8, ratio18_1, true);\nmotor rightMotorB = motor(PORT20, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 406.4, 304.79999999999995, mm, 1);\n\nmotor LiftMotorA = motor(PORT1, ratio36_1, true);\nmotor LiftMotorB = motor(PORT9, ratio36_1, false);\nmotor_group Lift = motor_group(LiftMotorA, LiftMotorB);\n\nmotor Hook = motor(PORT3, ratio36_1, true);\n\nmotor Clamp = motor(PORT4, ratio18_1, false);\n\ncontroller Controller1 = controller(primary);\n\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool Controller1UpDownButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control Lift\n      if (Controller1.ButtonL1.pressing()) {\n        Lift.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Lift.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Lift.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control Clamp\n      if (Controller1.ButtonR1.pressing()) {\n        Clamp.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Clamp.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Clamp.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonUp/ButtonDown status to control Hook\n      if (Controller1.ButtonUp.pressing()) {\n        Hook.spin(forward);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonDown.pressing()) {\n        Hook.spin(reverse);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (!Controller1UpDownButtonsControlMotorsStopped) {\n        Hook.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1UpDownButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\n// User defined function\nvoid myblockfunction_Set_Config();\n// User defined function\nvoid myblockfunction_Run_Skills();\n\nfloat myVariable;\n\n// User defined function\nvoid myblockfunction_Set_Config() {\n  // These blocks of code set the motors with different velocity and different stoppings\n  Lift.setStopping(hold);\n  Clamp.setStopping(hold);\n  Hook.setStopping(hold);\n  Clamp.setVelocity(65.0, percent);\n  Hook.setVelocity(75.0, percent);\n  Drivetrain.setStopping(coast);\n}\n\n// User defined function\nvoid myblockfunction_Run_Skills() {\n  // Pushes Red Mobile Goal to the other side.\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.driveFor(forward, 72.0, inches, true);\n  Drivetrain.setDriveVelocity(50.0, percent);\n  Drivetrain.driveFor(reverse, 12.0, inches, true);\n  // Grabs A netural Goal and pushes it to the balance.\n  Drivetrain.turnFor(left, 55.0, degrees, true);\n  Clamp.spinFor(forward, 400.0, degrees, true);\n  Drivetrain.driveFor(forward, 12.0, inches, true);\n  Clamp.spinFor(reverse, 200.0, degrees, true);\n  Drivetrain.turnFor(left, 13.0, degrees, true);\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.driveFor(forward, 104.0, inches, true);\n  Drivetrain.turnFor(left, 110.0, degrees, true);\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  myblockfunction_Run_Skills();\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  while (true) {\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  myblockfunction_Set_Config();\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n\n\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}