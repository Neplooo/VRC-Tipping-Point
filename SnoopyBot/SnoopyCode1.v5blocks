{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><comment id=\":YErA!qkhuw6g(g71m,R\" minimized=\"true\" x=\"668\" y=\"-262\" h=\"218\" w=\"286\">Project:  VEXV5Code Team 40994A\n              \nAuthor:  Sienna Graczyk\n\nCreated: 12/07/21\n\nConfiguration:\nNone\nNotes: Autonomous mode that needs to be on left side of the field. It grabs left mobile goal and places it on friendly side. Then it finishes with a 90* angle on the field.</comment><block type=\"v5_events_when_autonomous\" id=\"y)n):)-6lhx,qkLtf#Zn\" x=\"250\" y=\"-170\"><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"i}|+o0;EXPz21x$:!6mU\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"tCUz.d#`b|P2}`*i=L(1\"><field name=\"NUM\">95</field></shadow></value><next><block type=\"v5_motion_spin\" id=\"Q9kQ@$t{zP;C{{w.U6b~\"><field name=\"MOTOR\">ClawMotor</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_motion_spin_for\" id=\"@CK!a}:;?b)-7P5`b9y_\"><field name=\"MOTOR\">ArmMotor</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">TRUE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"zc4ro?@8{^Bb{itsB6ra\"><field name=\"NUM\">240</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"MUum]6Vu|NOH[VlacBs0\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"_B:L@+bDf#=v7E7RgseJ\"><field name=\"NUM\">1000</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"l1.kx:Uv!y3pEh70{F+;\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"([}%]c((L}vpMe|+/WNB\"><field name=\"NUM\">75</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"w0D-dtd2_|7wO,,3_m-Y\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"US{1j_kya4s(~3?ejp1,\"><field name=\"NUM\">300</field></shadow></value><next><block type=\"v5_motion_spin_at_voltage\" id=\"}Qf5D=khB|.t-(1LNPd1\"><field name=\"MOTOR\">ClawMotor</field><field name=\"DIRECTION\">rev</field><value name=\"VOLTAGE\"><shadow type=\"math_number\" id=\".4ql#-Y%xItO)GmN%6$N\"><field name=\"NUM\">25</field></shadow></value><next><block type=\"v5_control_wait\" id=\"SSM!nV+t0hDq#KQIjI9G\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"i2OaaIWFpN}N(;7tTvf[\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"=yRI!SWc^i+v~qyr^zwr\"><field name=\"MOTOR\">ArmMotor</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"iPk1c~r(F~6,vEWh{qDs\"><field name=\"NUM\">150</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"n|4gX@7-v4MkdCER@xzx\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"OvApjt#6a|W}o1=|morP\"><field name=\"NUM\">350</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"hz_$9ToR+@Or%nt]bJIu\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"uNhQ]M+NW~X/fAtYm}r~\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"99nM~z2bp{~p1s^gaHn[\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"?[qm#@[4CigY?1I9mnQs\"><field name=\"NUM\">20</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"gVup(Np]6at?#vXhG`_a\"><field name=\"MOTOR\">ArmMotor</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"4)ZnR:sKq+E:AW5b5E!%\"><field name=\"NUM\">150</field></shadow></value><next><block type=\"v5_control_wait\" id=\"6u{=$vYg{|ZS=daJ@ecb\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"]$=?WoXvB]1~#VD%D*]L\"><field name=\"NUM\">.5</field></shadow></value><next><block type=\"v5_motion_spin\" id=\"{[!Y~LRiN.@4UFi:80kW\"><field name=\"MOTOR\">ClawMotor</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_drivetrain_drive_for\" id=\"VuG=i5@rb/Gt*mp@;xvX\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"[},Q.q)$uhd,E(t-Wsok\"><field name=\"NUM\">14</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"AogAe#biCE5Y$F]0eT#X\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"=Jdh*hTyD^.|pk3Pn9C.\"><field name=\"NUM\">230</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"UhbofB5|dUI|mNlkH!PS\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"4cynj8D@=OIV/Y#Uvu73\"><field name=\"NUM\">12</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"`:r#lN,TSP-jjg4HhNb}\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"4Aqc,+j|9+}W/ts*7yzI\"><field name=\"NUM\">102</field></shadow></value><next><block type=\"v5_looks_controller_play_rumble\" id=\"8CLy*nwrYj[x9k.#K^j)\"><field name=\"PATTERN\">-.-.</field><field name=\"CONTROLLER\">Controller1</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"30\" y=\"-150\"></block><block type=\"v5_events_when_driver\" id=\"2sxv[tBvb/TOc3zh^a$R\" x=\"750\" y=\"150\"><next><block type=\"v5_control_forever\" id=\"F.tPZ%Bi}Wa/I(0.4jnV\"><statement name=\"SUBSTACK\"><block type=\"v5_motion_set_motor_stopping\" id=\"n1JRBOLH%lk`5v%NA{%#\"><field name=\"MOTOR\">ArmMotor</field><field name=\"MODE\">hold</field><next><block type=\"v5_motion_set_motor_stopping\" id=\"ZcL|9oKf|!Bc1$vUE#PI\"><field name=\"MOTOR\">ClawMotor</field><field name=\"MODE\">hold</field><next><block type=\"v5_motion_set_motor_torque\" id=\"OX7V%IM7eEB?|MjCRdy4\"><field name=\"MOTOR\">ArmMotor</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"BE6c$}9Mo;H/Z)d0DZ_3\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></statement></block></next></block></xml>","rconfig":[{"port":[1,10,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[3],"name":"ClawMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"Open","rev":"Close","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"ArmMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"Lift","rev":"Lower","gear":"ratio36_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"ArmMotor","leftDir":"false","right":"ClawMotor","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT10, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\nmotor ClawMotor = motor(PORT3, ratio18_1, false);\n\nmotor ArmMotor = motor(PORT8, ratio36_1, false);\n\ncontroller Controller1 = controller(primary);\n\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control ArmMotor\n      if (Controller1.ButtonL1.pressing()) {\n        ArmMotor.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        ArmMotor.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        ArmMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control ClawMotor\n      if (Controller1.ButtonR1.pressing()) {\n        ClawMotor.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        ClawMotor.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        ClawMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat myVariable;\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Drivetrain.setDriveVelocity(95.0, percent);\n  ClawMotor.spin(forward);\n  ArmMotor.spinFor(forward, 240.0, degrees, false);\n  Drivetrain.driveFor(forward, 1000.0, mm, true);\n  Drivetrain.turnFor(right, 75.0, degrees, true);\n  Drivetrain.driveFor(forward, 300.0, mm, true);\n  ClawMotor.spin(reverse, 25.0, volt);\n  wait(1.0, seconds);\n  ArmMotor.spinFor(forward, 150.0, degrees, true);\n  Drivetrain.turnFor(right, 350.0, degrees, true);\n  Drivetrain.setDriveVelocity(50.0, percent);\n  Drivetrain.driveFor(forward, 20.0, inches, true);\n  ArmMotor.spinFor(reverse, 150.0, degrees, true);\n  wait(0.5, seconds);\n  ClawMotor.spin(forward);\n  Drivetrain.driveFor(reverse, 14.0, inches, true);\n  Drivetrain.turnFor(left, 230.0, degrees, true);\n  Drivetrain.driveFor(reverse, 12.0, inches, true);\n  Drivetrain.turnFor(right, 102.0, degrees, true);\n  Controller1.rumble(\"-.-.\");\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  while (true) {\n    ArmMotor.setStopping(hold);\n    ClawMotor.setStopping(hold);\n    ArmMotor.setMaxTorque(100.0, percent);\n  wait(5, msec);\n  }\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n\n\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}