{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"-90\" y=\"-1070\"><next><block type=\"v5_looks_controller_play_rumble\" id=\"!MGAFtW/,NiCKu2h@A]~\"><field name=\"PATTERN\">....</field><field name=\"CONTROLLER\">Controller1</field><next><block type=\"v5_looks_print\" id=\"FlDT/U+}VJ%8u^I2~q2B\"><field name=\"TARGET\">Controller1</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"pi(}-64^Jra%]Ch9?]V:\"><field name=\"TEXT\">Starting stage 1</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"_q1uESE(l;m95~}2r_nI\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"gZ{WUU}J7yXO3zBMg@RQ\"><field name=\"NUM\">85</field></shadow></value><next><block type=\"v5_motion_spin\" id=\"zDxToi@2Vo]:LQ5GS~0U\"><field name=\"MOTOR\">clawmotor</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_motion_spin_for\" id=\"^%+tQEgFi{[j[FR(`$|h\"><field name=\"MOTOR\">ArmMotor</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">TRUE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"1Io1gtMD^Rsw$jCB6]=2\"><field name=\"NUM\">240</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"M;$/9$M^Zk+ncahcDQe4\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"$,lqE^A9ePkuY8dac1oO\"><field name=\"NUM\">1000</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"T|jQo_!NP2HyOQX9EJ57\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"i1lo|0H{R]AbckEOC)pZ\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"76(OT!1kC!A!yzW]tGDR\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\":pyG3p7lSI_bm%EW8{om\"><field name=\"NUM\">290</field></shadow></value><next><block type=\"v5_motion_spin_at_voltage\" id=\"UA^r-7nrJ$8xFwT~#SE6\"><field name=\"MOTOR\">clawmotor</field><field name=\"DIRECTION\">rev</field><value name=\"VOLTAGE\"><shadow type=\"math_number\" id=\"b;X9.HNMf8BBd_Mn)^ul\"><field name=\"NUM\">40</field></shadow></value><next><block type=\"v5_control_wait\" id=\"OJm31i%#U]A|XT2zH-F/\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"!6`2/SWFz7e$5E!ywV2:\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"}7*j?KKu12X?V?lFLW/i\"><field name=\"MOTOR\">ArmMotor</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"F=SXT9=!b}tYGhtXv{oR\"><field name=\"NUM\">150</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"%+9LFA}7}XQM?l$F]hJ.\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"d#3e]D(kTb*:4Nooha=n\"><field name=\"NUM\">360</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"F}=H^GGo[y!^O7e,J8sW\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"3ct/*Rej@whVo.k!50/B\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\",z4/9C1IPoL$(2/CTN`]\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"y)y}~vQxh,V?B-|kX){_\"><field name=\"NUM\">25</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"!G~qC=n_.:r4V8%dV?-;\"><field name=\"MOTOR\">ArmMotor</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"+s`w;-UcfuEXJB:}~~0D\"><field name=\"NUM\">150</field></shadow></value><next><block type=\"v5_control_wait\" id=\"6.iXHIk]py7alc0/%,z.\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"tBSd/Pvd-Svy)euBW:Uc\"><field name=\"NUM\">.5</field></shadow></value><next><block type=\"v5_motion_spin\" id=\"J~K.nC+vmvAqL8gEgj,f\"><field name=\"MOTOR\">clawmotor</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_drivetrain_drive_for\" id=\"2iX.8o+7xz{3ogv_zXQr\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"??ISIhECe8hiKv}BR(lK\"><field name=\"NUM\">32</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"cpQ0[jPk%b:U}+KLL.tY\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"L6W#bm)iwsq!6UC~5A{H\"><field name=\"NUM\">93</field></shadow></value><next><block type=\"v5_looks_clear_all_rows\" id=\"y4XU]H:j0w93,I^%k]!S\"><field name=\"TARGET\">Controller1</field><next><block type=\"v5_looks_controller_play_rumble\" id=\"pynmM9s/B{O]pWdAJ$HZ\"><field name=\"PATTERN\">....</field><field name=\"CONTROLLER\">Controller1</field><next><block type=\"v5_looks_print\" id=\"|;7i3D@E9#.ee960Peb]\"><field name=\"TARGET\">Controller1</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"*_B?JjB-]dwk]?uDn)JV\"><field name=\"TEXT\">1 STAGE OVER</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_autonomous\" id=\"m`lA!V4H^R%5HP{oCcT*\" x=\"910\" y=\"-970\"></block><block type=\"v5_drivetrain_turn_for\" id=\"I1Bbby,p[@gGS=mL)I-P\" x=\"550\" y=\"-230\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"`%DSkCu(cDx78WjNf%n)\"><field name=\"NUM\">102</field></shadow></value></block><block type=\"v5_drivetrain_drive_for\" id=\"w1LJvES4`*B%o^#C!{to\" x=\"390\" y=\"70\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"1rYIijl0zF^k2fPo,_g)\"><field name=\"NUM\">15</field></shadow></value><next><block type=\"v5_control_wait\" id=\"{~x(7w1GT7CO?5g]BeR(\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"K!N$kkNLYK*IL1UvZdN?\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_motion_spin_at_voltage\" id=\"5,i:Cs}Qi@zH{QPtInRk\"><field name=\"MOTOR\">clawmotor</field><field name=\"DIRECTION\">rev</field><value name=\"VOLTAGE\"><shadow type=\"math_number\" id=\"E79J^k`f6(FlXNo9VsKk\"><field name=\"NUM\">40</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"*o]62/-NdiwAQ.*Iun/w\"><field name=\"MOTOR\">ArmMotor</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\".P?!ri)cA#F2V7BXq=GW\"><field name=\"NUM\">150</field></shadow></value></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[1,10,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[3],"name":"clawmotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"open","rev":"close","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"ArmMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"up ","rev":"down","gear":"ratio36_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"ArmMotor","leftDir":"false","right":"clawmotor","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT10, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\nmotor clawmotor = motor(PORT3, ratio18_1, false);\n\nmotor ArmMotor = motor(PORT8, ratio36_1, false);\n\ncontroller Controller1 = controller(primary);\n\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control ArmMotor\n      if (Controller1.ButtonL1.pressing()) {\n        ArmMotor.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        ArmMotor.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        ArmMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control clawmotor\n      if (Controller1.ButtonR1.pressing()) {\n        clawmotor.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        clawmotor.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        clawmotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Controller1.rumble(\"....\");\n  Controller1.Screen.print(\"Starting stage 1\");\n  Drivetrain.setDriveVelocity(85.0, percent);\n  clawmotor.spin(forward);\n  ArmMotor.spinFor(forward, 240.0, degrees, false);\n  Drivetrain.driveFor(forward, 1000.0, mm, true);\n  Drivetrain.turnFor(right, 80.0, degrees, true);\n  Drivetrain.driveFor(forward, 290.0, mm, true);\n  clawmotor.spin(reverse, 40.0, volt);\n  wait(1.0, seconds);\n  ArmMotor.spinFor(forward, 150.0, degrees, true);\n  Drivetrain.turnFor(right, 360.0, degrees, true);\n  Drivetrain.setDriveVelocity(50.0, percent);\n  Drivetrain.driveFor(forward, 25.0, inches, true);\n  ArmMotor.spinFor(reverse, 150.0, degrees, true);\n  wait(0.5, seconds);\n  clawmotor.spin(forward);\n  Drivetrain.driveFor(reverse, 32.0, inches, true);\n  Drivetrain.turnFor(left, 93.0, degrees, true);\n  Controller1.Screen.clearScreen();\n  Controller1.rumble(\"....\");\n  Controller1.Screen.print(\"1 STAGE OVER\");\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n\n\n\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}